## This `docker-compose.dev` version use `nodemon` for developing.

version: "3.8"

services:
  app:
    depends_on: 
      - mysql
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - 3355:3355
    volumes:
      - /app/node_modules # exlude node_modules
      - ./:/app # mounting local `cwd` with docker container's `/app` path
    command: sh -c "npm run dev"

    # By default, the `docker-compose` command will look for a file named `.env` in the directory
    # By passing the file as an argument, you can store it anywhere and name it appropriately
    # Example: `docker-compose --env-file ./config/.env.dev up`
    # Check details on docker compose official docs: https://docs.docker.com/compose/environment-variables/
    # So, if you defined below envs in `.env` file, you don't need these envs from this yaml file.
    environment:
      COMPOSE_PROJECT_NAME: travelhelp-dev
    #   DEV_DB_HOST: mysql # db host should be a db service name defined on docker-compose file.
    #   DEV_DB_USER_NAME: root
    #   DEV_DB_PASSWORD: secret
    #   DEV_DB_DATABASE: travelhelp
    #   DEV_DB_PORT: 3306  # should use 3306 for internal networking (not 8855)
    #   DEV_DB_DIALECT: mysql

  mysql:
    image: mysql:8.0.21
    ports:
      - 8855:3306 # expose this 8855 port for accessing from local host(with the datagrip).
      # you still can access to this mysql with the 3306 port internally(on the same docker network).
    volumes:
      - mysql-data:/var/lib/mysql # mounting docker volume
    environment: 
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: travelhelp

volumes:
  mysql-data: # mysql db will be managed by docker volume
