name: Prod/Server/CI&CD with GHCR

on:
  push:
    branches:
      - main
    tags:
      - v*
    paths:
      - 'server/**'
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: travelhelp
  ECS_SERVICE: travelhelp-ecs-service          # set this to your Amazon ECS service name
  ECS_CLUSTER: travelhelp-ecs                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./server/task-definition.json  # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: travelhelp-app               # set this to the name of the container in the containerDefinitions section of your task definition

# Set default path for entire jobs
defaults:
  run:
    working-directory: ./server

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # TEST:
  #   name: Test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       env:
  #         DB_USER_NAME: ${{ secrets.DB_USER_NAME }}
  #         DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  #         DB_DATABASE: travelhelp
  #         DB_HOST: ${{ secrets.DB_HOST }}
  #         DB_PORT: ${{ secrets.DB_PORT }}
  #         DB_DIALECT: mysql
  #         SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  #         NODEMAILER_USER: ${{ secrets.NODEMAILER_USER }}
  #         NODEMAILER_PASS: ${{ secrets.NODEMAILER_PASS }}
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build . --file Dockerfile
  #         fi

  CI:
    # Ensure test job passes before pushing image.
    # needs: TEST
    name: Continuous Integration
    runs-on: ubuntu-latest

    outputs:  # output full image name with the sha tag for next job:CD
      image_sha: ${{ steps.image_digest.outputs.image_sha }}

    steps:    
      - name: Checkout source code
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      # - name: Test
      #   id: docker_test
      #   uses: docker/build-push-action@v2
      #   with:
      #     builder: ${{ steps.buildx.outputs.name }}
      #     context: ./server
      #     file: ./server/Dockerfile
      #     target: test

      - name: Get Image ID (for docker tag)
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention on "main" branch. Others will remain.
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # Set IMAGE_ID as an env variable
          echo "IMAGE_ID=$IMAGE_ID:$VERSION" >> $GITHUB_ENV

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags:  ${{ env.IMAGE_ID }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest & get image's sha value for deploy work.
        id: image_digest
        run: |
          echo IMAGE_DIGEST=${{ steps.docker_build.outputs.digest }}

          IMAGE_BASE=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_BASE=$(echo $IMAGE_BASE | tr '[A-Z]' '[a-z]')

          # Get the image name with the sha value
          IMAGE_SHA=$IMAGE_BASE@${{ steps.docker_build.outputs.digest }}

          echo IMAGE_SHA=$IMAGE_SHA

          # Set IMAGE_SHA as an output for next CD job
          echo "::set-output name=image_sha::$IMAGE_SHA"

  CD:
    # Ensure CI job passes before CD job.
    needs: CI

    name: Continuous Delivery & Deployment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.CI.outputs.image_sha }}  # use output from the previous CI job

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true