name: Prod/Client/React Build to S3

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
    tags:
      - v*
    paths:
      - 'client/**'

<<<<<<< HEAD:.github/workflows/react-build-s3.yml
  pull_request:
    branches:
      - main
    paths:
      - 'client/**'
    types:
      - synchronize
=======
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - 'client/**'
  #   types:
  #     - synchronize
>>>>>>> 3349e19f91279df03128afe49e5f4208559b3f8d:.github/workflows/prod-client-react-build-s3.yml

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
<<<<<<< HEAD:.github/workflows/react-build-s3.yml
  build and deploy:
=======
  Build-Deploy:
>>>>>>> 3349e19f91279df03128afe49e5f4208559b3f8d:.github/workflows/prod-client-react-build-s3.yml
    runs-on: ubuntu-latest
    # Set default path for this "build" job.
    defaults:
      run:
        working-directory: ./client

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout source code
        uses: actions/checkout@v2

      # Specifying the Node version
      - name: Use Node.js v14.x
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      # caching node modules
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

<<<<<<< HEAD:.github/workflows/react-build-s3.yml
      - name: Clean install dependencies
        # this installation step can be skipped when a cache hit occurs on the key.
        # if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --silent --only=production
=======
      - name: (without cache) Clean install dependencies
        # this installation step can be skipped when a cache-hit occurs on the key.
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --silent --only=production

      - name: (with cache)Install dependencies
        # this installation step will be done only in case the cache-hit occurs.
        if: steps.cache.outputs.cache-hit == 'true'
        run: npm install --silent --only=production
>>>>>>> 3349e19f91279df03128afe49e5f4208559b3f8d:.github/workflows/prod-client-react-build-s3.yml

      - name: Build
        run: npm run build --if-present
        env:
          # Environment variables for channeltalk. Webpack will contain those information when bundling.
          REACT_APP_CHANNELTALK_KEY: ${{ secrets.REACT_APP_CHANNELTALK_KEY }}
          REACT_APP_CHANNELTALK_SECRET: ${{ secrets.REACT_APP_CHANNELTALK_SECRET }}
          CI: false

      # - name: Test
      #   run: |
      #     npx server -s -d -C build
      #     npx test

      - name: Deploy on S3 & purge from cloudfront
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws s3 sync \
            --region ap-northeast-2 \
            --delete \
            build s3://travelhelp-source
          aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

# to do: build / test / deploy 단계로 나누기. artifact를 이용하거나 output을 이용해서 build 단계에서 나온 build 폴더를 각 jobs에서 활용.
