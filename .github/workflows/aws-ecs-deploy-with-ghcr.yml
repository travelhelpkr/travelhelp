# This workflow will deploy a new task definition to Amazon ECS with an image from the Github Container Registry.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 2. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 3. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Server/CD to ECS with GitHub Conatiner Registry

on:
  # push:
  #   branches: 
  #     - main
  #   paths:
  #     - 'server/**'
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - 'server/**'
  #   types:
  #     - synchronize
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ECS_SERVICE: travelhelp-ecs-service          # set this to your Amazon ECS service name
  ECS_CLUSTER: travelhelp-ecs                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./server/task-definition.json  # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: travelhelp-app               # set this to the name of the container in the containerDefinitions section of your task definition
  IMAGE_ID: ghcr.io/imbrok/travelhelp:latest   # set this to the name of the repository with the image name

jobs:
  CD:
    name: Continuous Delivery & Deployment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.IMAGE_ID }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
